* Day 3: Mull It Over

"Our computers are having issues, so I have no idea if we have any Chief
Historians in stock! You're welcome to check the warehouse, though," says the
mildly flustered shopkeeper at the North Pole Toboggan Rental Shop. The
Historians head out to take a look.

The shopkeeper turns to you. "Any chance you can see why our computers are
having issues again?"

The computer appears to be trying to run a program, but its memory (your puzzle
input) is corrupted. All of the instructions have been jumbled up!

It seems like the goal of the program is just to multiply some numbers. It does
that with instructions like mul(X,Y), where X and Y are each 1-3 digit numbers.
For instance, mul(44,46) multiplies 44 by 46 to get a result of 2024. Similarly,
mul(123,4) would multiply 123 by 4.

However, because the program's memory has been corrupted, there are also many
invalid characters that should be ignored, even if they look like part of a mul
instruction. Sequences like mul(4*, mul(6,9!, ?(12,34), or mul ( 2 , 4 ) do
nothing.

For example, consider the following section of corrupted memory:

#+begin_example
xmul(2,4)%&mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))
#+end_example

Only the four highlighted sections are real mul instructions. Adding up the
result of each instruction produces 161 (2*4 + 5*5 + 11*8 + 8*5).

Scan the corrupted memory for uncorrupted mul instructions. What do you get if
you add up all of the results of the multiplications?

#+begin_src ruby
  data = File.read("data.txt")

  dbg = ""
  sum = 0

  m = data.scan( /(mul\(([0-9]{1,3}),([0-9]{1,3})\))/ )
  m.each do |i|
    sum += i[1].to_i * i[2].to_i
  end

  sum
#+end_src

#+RESULTS:
: 86152135

** Part Two

As you scan through the corrupted memory, you notice that some of the
conditional statements are also still intact. If you handle some of the
uncorrupted conditional statements in the program, you might be able to get an
even more accurate result.

There are two new instructions you'll need to handle:

- The do() instruction enables future mul instructions.
- The don't() instruction disables future mul instructions.
- Only the most recent do() or don't() instruction applies. At the beginning of
  the program, mul instructions are enabled.

For example:

#+begin_example
xmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))
#+end_example

This corrupted memory is similar to the example from before, but this time the
mul(5,5) and mul(11,8) instructions are disabled because there is a don't()
instruction before them. The other mul instructions function normally, including
the one at the end that gets re-enabled by a do() instruction.

This time, the sum of the results is 48 (2*4 + 8*5).

Handle the new instructions; what do you get if you add up all of the results of just the enabled multiplications?

#+name: task03_2
#+header: :var filename="data.txt"
#+begin_src ruby
  data = File.read(filename)

  sum = 0

  # split block in enabled parts and disabled parts
  blocks = data.scan( /((.*?)don't\(\)(.*?)do\(\))/m )

  blocks.each do |b|
    # if enabled part contains do() than the part before that might be disabled
    # otherwise whole part is enabled
    calc = b[1]
    c = b[1].scan /(.*)do\(\)(.*?)\z/m
    calc = c[0][1] if not c.empty?

    # do the actual calc
    m = calc.scan( /(mul\(([0-9]{1,3}),([0-9]{1,3})\))/ )
    m.each do |i|
      sum += i[1].to_i * i[2].to_i
    end

    # second block might contain additional don't()s - only the last one might
    # count (description is not precise)
    c = b[2].scan /(.*)don't\(\)(.*?)\z/m
    if not c.empty?
      m = c[0][0].scan( /(mul\(([0-9]{1,3}),([0-9]{1,3})\))/ )
      m.each do |i|
        sum += i[1].to_i * i[2].to_i
      end
    end
  end

  # sum last enabled block
  blocks = data.scan /(.*)do\(\)(.*?)\z/m

  m = blocks[0][1].scan( /(mul\(([0-9]{1,3}),([0-9]{1,3})\))/ )
  m.each do |i|
    sum += i[1].to_i * i[2].to_i
  end

  sum
#+end_src

#+RESULTS:
: 86152135

*** Previous Attempts
26853371
158995099
2285919
4468983
61621825
86152135

*** Test Data
#+call: task03_2(filename="testdata2.txt")

#+RESULTS:
: 48

Should be 48
